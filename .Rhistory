summary(numericvars)
numericvars <- NULL
numericvarsid <- NULL
non_numericvars <- NULL
non_numericvarsid <- NULL
id<-0L
for (Var in names(nzv_training)) {
id<-id+1
if(class(nzv_training[,Var]) == 'integer' | class(nzv_training[,Var]) == 'numeric') {
numericvars <- c(numericvars,Var)
numericvarsid <- c(numericvarsid,id)
}
else {
non_numericvars <- c(non_numericvars,Var)
non_numericvarsid <- c(non_numericvarsid,id)
}
}
library(lattice)
library(ggplot2)
library(graphics)
library(Hmisc)
library(e1071)
library(caret)
training = read.csv("pml-training.csv")
testing =  read.csv("pml-testing.csv")
nzv <- nearZeroVar(training[,-160])
dim(training)
nzv_training <- training[,-nzv]
dim(nzv_training)
preProcess(nzv_training[,-160], method="pca", thresh=0.8)
numericvars <- NULL
numericvarsid <- NULL
non_numericvars <- NULL
non_numericvarsid <- NULL
id<-0L
for (Var in names(nzv_training)) {
id<-id+1
if(class(nzv_training[,Var]) == 'integer' | class(nzv_training[,Var]) == 'numeric') {
numericvars <- c(numericvars,Var)
numericvarsid <- c(numericvarsid,id)
}
else {
non_numericvars <- c(non_numericvars,Var)
non_numericvarsid <- c(non_numericvarsid,id)
}
}
summary(numericvars)
numericvarsid
numPCATrain-<preProcess(data=nzv_training[,numericvarsid],method="pca",thresh=0.9)
numPCATrain<-preProcess(data=nzv_training[,numericvarsid],method="pca",thresh=0.9)
numPCATrain<-preProcess(nzv_training$classe,data=nzv_training[,numericvarsid],method="pca",thresh=0.9)
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.9)
numPCATrain
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.8)
numPCATrain
preProcTrain<-cbind(numPCATrain,numPCATrain[,non_numericvarsid])
call(numPCATrain)
rotation(numPCATrain)
preProcTrain<-cbind(numPCATrain,numPCATrain[,non_numericvarsid],na.remove = TRUE)
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.8)
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.8,na.remove = TRUE)
numPCATrain
m<-abs(cor(nzv_training[,numericvarsid]))
diag(m)<-0
which(m>0.75,arr.ind=T)
optimTraining<-cbind(numPCATrain$x,nzv_training[,-numericvarsid])
head(numPCATrain$x)
head(numPCATrain$x[,1:17])
numPCATrain
numPCATrain$x
numPCATrain<-prcomp(nzv_training[,numericvarsid])
?prcomp
numPCATrain<-prcomp(nzv_training[,numericvarsid],center=TRUE,scale=TRUE,newdata="new_pcaTrainNumeric")
numPCATrain<-prcomp(nzv_training[,numericvarsid])
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.80,na.remove = TRUE)
numPCATrain<-preProcess(nzv_training[,numericvarsid],method="pca",thresh=0.80,na.remove = TRUE,newdata="newdata")
head(newdata)
summary(newdata)
numPCATrain
?preProcess
numPCATrain$dim
numPCATrain$dim$call
numPCATrain$call
numPCATrain$rotation
head(numPCATrain$x[,1:3])
head(numPCATrain$x)
numPCATrain$x
?preProcess
numericTraining<-predict(numPCATrain,nzv_training[,numericvarsid])
head(numericTraining)
head(nzv_training[,numericvarsid])
df[,colSums(is.na(df)) != nrow(df)]
numericTraining<-nzv_training[,numericvarsid])
numericTraining<-nzv_training[,numericvarsid]
summary(numericTraining[,colSums(is.na(df)) != nrow(df)])
summary(numericTraining[,colSums(is.na(numericTraining)) != nrow(numericTraining)])
numericNANTraining<-numericTraining[,colSums(is.na(numericTraining)) != nrow(numericTraining)])
numericNANTraining<-numericTraining[,colSums(is.na(numericTraining)) != nrow(numericTraining)]
dim(numericNANTraining)
numericNANTraining<-numericTraining[,colSums(is.na(numericTraining)) >= 0.4*nrow(numericTraining)]
dim(numericNANTraining)
m<-abs(cor(numericNANTraining))
diag(m)<-0
which(m>0.75,arr.ind=T)
m<-abs(cor(numericNANTraining))
diag(m)<-0
which(m>0.6,arr.ind=T)
numPCATrain<-preProcess(numericNANTraining,method="pca",thresh=0.80)
numPCATrain
numericTrainingData<-predict(numPCATrain,numericNANTraining)
summary(numericTrainingData)
preProcImpute <- preProcess(method="bagImpute", numericNANTraining)
preProcImpute <- preProcess(numericNANTraining,method="bagImpute")
install.packages("ipred")
library(ipred)
preProcImpute <- preProcess(numericNANTraining,method="bagImpute")
numericNANTrainingImput<- predict(preProcImpute, numericNANTraining)
preProcImpute
numericNANTrainingImput <- predict(preProcImpute, numericNANTraining)
numericNANTraining<- predict(preProcImpute, numericNANTraining)
preProcImpute <- preProcess(method="bagImpute",numericNANTraining)
numericNANTrainingImput<- predict(preProcImpute, numericNANTraining)
preProcImpute <- preProcess(method="knnImpute",numericNANTraining)
numericNANTrainingImput<- predict(preProcImpute, numericNANTraining)
install.packages("RANN")
library(RANN)
numericNANTrainingImput<- predict(preProcImpute, numericNANTraining)
numericNANTrainingImputed<- predict(preProcImpute, numericNANTraining)
numPCATrain<-preProcess(numericNANTrainingImputed,method="pca",thresh=0.80)
numPCATrain
numericTrainingData<-predict(numPCATrain,numericNANTrainingImputed)
summary(numericTrainingData)
head(numericTrainingData)
trainingData<-cbind(numericTrainingData,nzv_training[,non_numericvarsid])
dim(trainingData)
dim(numericTrainingData)
head(trainingData)
trainingData[1:100,]
registerDoMC(cores=4)
install.apckages(domc)
install.apckages("DoMC")
install.apckages("doMC")
install.packages("doMC")
?train
?train
nnetFit <- train(trainingData, trainingData$classe,  method = "nnet", preProcess = "range", tuneLength = 2, trace = FALSE, maxit = 100)
nnetFit <- train(trainingData, trainingData$classe,  method = "knn", preProcess = "range", tuneLength = 2, trace = FALSE, maxit = 100)
nnetFit <- train(trainingData, trainingData$classe,  method = "knn")
nnetFit <- train( trainingData$classe,trainingData,  method = "knn")
warnings()
knnFit2 <- train(trainingData, trainingData$classe,
method = "knn",
preProcess = c("center", "scale","knnImpute"),
tuneLength = 10,
trControl = trainControl(method = "boot"))
knnFit2 <- train(classe ~ ., data= trainingData,
method = "knn",
preProcess = c("center", "scale","knnImpute"),
tuneLength = 10,
trControl = trainControl(method = "boot"))
knnFit2
verification<-verification[,-nzv]
verification <- trainingCSV[-inTrain, ]
trainingCSV = read.csv("pml-training.csv")
inTrain <- createDataPartition(trainingCSV$classe, p=0.75, list=FALSE)
training <- trainingCSV[inTrain, ]
verification <- trainingCSV[-inTrain, ]
verification<-verification[,-nzv]
numericVerification<-verification[,colSums(is.na(numericTraining)) >= 0.4*nrow(numericTraining)]
numericVerification<- predict(preProcImpute, numericVerification)
numericVerification<-verification[,numericvarsid]
numericVerification<-verification[,colSums(is.na(numericTraining)) >= 0.4*nrow(numericTraining)]
numericVerification<- predict(preProcImpute, numericVerification)
numericVerification<-predict(numPCATrain,numericVerification)
verificationData<-cbind(numericVerification,verification[,non_numericvarsid])
confusionMatrix(predict(knnFit2, verificationData[,-verificationData$classe], verification[,verificationData$classe])
)
numericVerification<-verification[,colSums(is.na(numericTraining)) >= 0.4*nrow(numericTraining)]
numericVerification<- predict(preProcImpute, numericVerification)
dim(numericVerification)
dim(numericNANTraining)
numericVerification<-predict(numPCATrain,numericVerification)
knnFit2 <- train(classe ~ ., data= trainingData,method = "knn",preProcess = c("center", "scale","knnImpute","pca"),tuneLength = 10, trControl = trainControl(method = "boot"))
knnFit2
trainingData<-cbind(numericNANTraining,nzv_training[,non_numericvarsid])
verificationData<-cbind(numericVerification,verification[,non_numericvarsid])
knnFit2 <- train(classe ~ ., data= trainingData,method = "knn",preProcess = c("center", "scale","knnImpute","pca"),tuneLength = 10, trControl = trainControl(method = "boot"))
confusionMatrix(predict(knnFit2, verificationData[,-verificationData$classe], verification[,verificationData$classe]))
trainingData<-cbind(numericTrainingData,nzv_training[,non_numericvarsid])
knnFit2 <- train(classe ~ ., data= trainingData,method = "knn",preProcess = c("center", "scale","knnImpute","pca"),tuneLength = 10, trControl = trainControl(method = "boot"))
